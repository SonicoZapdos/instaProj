@model instaProj.Models.Post

@{
    ViewData["Title"] = "Post";
}

<div class="maxW d-flex flex-column gap-4" style="height: 100%; overflow: auto;" id="forYou">
    <div class="maxW box-post p-1" id="new-post">
        <div class="col">
            <form asp-action="CreatePost" asp-controller="Posts" enctype="multipart/form-data" method="post"
                id="postForm">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="row d-flex align-items-center gap-3 p-2">
                    <div class="logo">
                        <img src="/images/ppic.png" alt="" class="user">
                    </div>
                    <br>
                    <div class="form-floating p-1" style="width:85%">
                        <textarea class="form-control" id="floatingTextarea" maxlength="250" placeholder="Novo Post"
                            asp-for="Description" style="background-color: lightgrey"></textarea>
                        <label for="floatingTextarea">Novo Post</label>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>
                </div>
                <input type="file" id="inputFile" multiple onchange="handleFileSelect(event)" />

                <!-- Carrossel de Imagens -->
                <div id="carouselExampleControls" class="carousel slide" data-bs-ride="carousel">
                    <div class="carousel-inner" id="carouselInner">
                        <!-- Imagens selecionadas aparecerão aqui -->
                    </div>
                    <button class="carousel-control-prev small-carousel-control" type="button"
                        data-bs-target="#carouselExampleControls" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon small-carousel-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next small-carousel-control" type="button"
                        data-bs-target="#carouselExampleControls" data-bs-slide="next">
                        <span class="carousel-control-next-icon small-carousel-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                </div>

                <div class="row d-flex align-items-center justify-content-between p-2 pt-0 pb-2">
                    <div class="row d-flex gap-1 align-items-center justify-content-start" style="width: 50%">
                        <div class="file-input-container">
                            <label class="btn-icon" for="inputFile">
                                <span class="material-symbols-outlined no-config"
                                    style="width: auto;">upload_file</span>
                            </label>
                        </div>
                        <div class="file-input-container">
                            <label class="btn-icon">
                                <span class="material-symbols-outlined no-config" style="width: auto;">link</span>
                            </label>
                        </div>
                    </div>
                    <div class="file-input-container">
                        <button type="submit" class="btn-icon" style="width: auto">
                            <span class="material-symbols-outlined no-config" style="width: auto;">send</span>
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
    <div class="card mb-3">
        <img src="https://webartdevelopers.com/blog/wp-content/uploads/2020/10/500-error-666x333.gif" class="card-img-top" alt="..." />
        <div class="card-body">
            <h5 class="card-title">Card title</h5>
            <p class="card-text">
                This is a wider card with supporting text below as a natural lead-in to additional content. This content
                is a little bit longer.
            </p>
            <p class="card-text"><small class="text-muted">Last updated 3 mins ago</small></p>
        </div>
    </div>
</div>

<!-- Modais -->
<div class="modal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="npm-title">Modal title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="npm-body">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

<style>
    .border {
        border: 1px solid;
        border-radius: 15px;
        height: 100px;
    }

    #new-post {
        height: auto;
    }

    .box-post {
        background-color: lightgray;
    }

    .file-input-container {
        overflow: hidden;
        border-radius: 50%;
        width: 50px;
        align-items: center;
        height: 50px;
        margin-right: 4px;
        position: relative;
        display: inline-block;
    }

    .file-input-container:hover {
        color: rgb(35, 35, 35);
    }

    .file-input-container input[type="file"] {
        position: absolute;
        opacity: 0;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        cursor: pointer;
    }

    .btn-icon {
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 50px;
        height: 50px;
        background-color: transparent;
        border: none;
    }

    .btn-icon:focus {
        outline: none;
    }

    /* Garantir que as imagens do carrossel tenham uma altura de 200px */
    .carousel-inner img {
        height: 200px;
        object-fit: cover;
        /* Manter a proporção da imagem */
    }

    /* Estilizar o botão de remoção ("X") */
    .remove-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .remove-btn:hover {
        background-color: rgba(255, 0, 0, 0.7);
        color: white;
    }

    /* Reduzir o tamanho dos botões de controle do carrossel */
    .small-carousel-control {
        width: 30px;
        height: 30px;
    }

    .small-carousel-icon {
        width: 20px;
        height: 20px;
    }
</style>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

<script>
    let selectedFiles = [];

    function handleFileSelect(event) {
        const files = event.target.files;
        for (let i = 0; i < files.length; i++) {
            selectedFiles.push(files[i]);
        }
        displaySelectedFiles();
    }

    function displaySelectedFiles() {
        const carouselInner = document.getElementById('carouselInner');
        carouselInner.innerHTML = '';

        selectedFiles.forEach((file, index) => {
            const reader = new FileReader();
            reader.onload = function (e) {
                const item = document.createElement('div');
                item.className = 'carousel-item' + (index === 0 ? ' active' : '');
                item.innerHTML = `
                            <img src="${e.target.result}" class="d-block w-100" alt="Imagem Selecionada">
                            <button type="button" class="remove-btn" onclick="removeFile(${index})">&times;</button>
                        `;
                carouselInner.appendChild(item);
            };
            reader.readAsDataURL(file);
        });
    }

    function removeFile(index) {
        selectedFiles.splice(index, 1);
        displaySelectedFiles();
    }

    document.getElementById('postForm').addEventListener('submit', function (event) {
        event.preventDefault(); // Evitar o envio automático do formulário

        const formData = new FormData(this);
        selectedFiles.forEach((file, index) => {
            formData.append('Archives', file); // Adicionar cada arquivo ao FormData
        });

        fetch('@Url.Action("CreatePost", "Posts")', {
            method: 'POST',
            body: formData,
            headers: {
                'X-CSRF-TOKEN': $('input[name="__RequestVerificationToken"]').val() // CSRF token
            }
        })
            .catch(error => {
                console.error('Erro:', error);
                // Tratar o erro conforme necessário
            });
    });
</script>
