@model instaProj.Models.Post

<div class="maxW box-post p-1 card" id="new-post">
    <div class="col">
        <form asp-action="CreatePost" asp-controller="Posts" enctype="multipart/form-data" method="post" id="postForm">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="row d-flex align-items-center gap-3 p-2">
                <div class="logo">
                    <img src="/images/ppic.png" alt="" class="user">
                </div>
          
                <br>
                <div class="form-floating p-1" style="width:70%">
                    <textarea  class="form-control" id="floatingTextarea" maxlength="250" placeholder="Novo Post" asp-for="Description" style="background-color: lightgrey"></textarea>
                    <label for="floatingTextarea" style="color: black" >Nova mensagem...</label>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>
            </div>
            <input type="file" id="inputFile" class="d-none" multiple onchange="handleFileSelect(event)" />

            <!-- Carrossel de Imagens -->
            <div id="carouselExampleControls" class="carousel slide d-none maxW" data-bs-ride="carousel" style="fit-content; padding-top:10px; padding-bottom:10px;">
                <div class="carousel-inner" id="carouselInner">
                    <!-- Imagens selecionadas aparecerão aqui -->
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleControls" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleControls" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>
            </div>

            <div class="row d-flex align-items-center justify-content-between p-2 pt-0 pb-2">
                <div class="row d-flex gap-1 align-items-center justify-content-start" style="width: 70%;">
                    <div class="file-input-container">
                        <label class="btn-icon" for="inputFile">
                            <span class="material-symbols-outlined no-config" style="width: auto;">upload_file</span>
                        </label>
                    </div>
                    <div class="file-input-container">
                        <label class="btn-icon" for="checkLink">
                            <span class="material-symbols-outlined no-config" style="width: auto;">link</span>
                        </label>
                    </div>
                    <div class="d-none w-auto gap-1" id="linkShow">
                        <div class="form-floating linkA" style="height: 40px">
                            <input type="url" class="form-control p-0" id="linkInput" placeholder="Insira um Link" style="height: 40px">
                            <label class="pt-2" for="linkInput" style="overflow:hidden;">Insira um Link</label>
                        </div>
                        <button type="button" onclick="stringSelect()" class="btn btn-dark">Enviar</button>
                        <div class="form-check d-none">
                            <input class="form-check-input" type="checkbox" value="" id="checkLink" onchange="onOpen()">
                        </div>
                    </div>
                </div>
                <div class="file-input-container">
                    <button type="submit" class="btn-icon" style="width: auto">
                        <span class="material-symbols-outlined no-config" style="width: auto; color: white; ">send</span>
                    </button>
                </div>
            </div>
        </form>
        <div id="error-message" class="text-danger" style="display: none;">Por favor, preencha a descrição ou adicione pelo menos um arquivo.</div>
    </div>
</div>

<script>
    let selectedFiles = [];

    function handleFileSelect(event) {
        const files = event.target.files;
        for (let i = 0; i < files.length; i++) {
            selectedFiles.push(files[i]);
            if (files[i].type.startsWith('video/')) {
                // Processar thumbnail de vídeo
                const video = document.createElement('video');
                video.preload = 'metadata';
                video.onloadedmetadata = function () {
                    video.currentTime = Math.min(1, video.duration - 1); // Capturar o quadro após 1 segundo
                };
                video.onseeked = function () {
                    const canvas = document.createElement('canvas');
                    canvas.width = video.videoWidth;
                    canvas.height = video.videoHeight;

                    const context = canvas.getContext('2d');
                    context.drawImage(video, 0, 0, canvas.width, canvas.height);

                    const thumbnailUrl = canvas.toDataURL('image/png'); // Convertendo para base64

                    const item = document.createElement('div');
                    item.className = 'carousel-item' + (selectedFiles.length - 1 === 0 ? ' active' : '');
                    item.innerHTML = `
                            <img src="${thumbnailUrl}" class="maxW" style="height: 300px" alt="Thumbnail do Vídeo">
                            <button type="button" class="remove-btn z-3" onclick="removeFile(${selectedFiles.length - 1})">
                                <span class="material-symbols-outlined no-config">close</span>
                            </button>
                        `;
                    const carouselInner = document.getElementById('carouselInner');
                    carouselInner.appendChild(item);
                    document.getElementById('carouselExampleControls').classList.remove('d-none');
                };
                video.src = URL.createObjectURL(files[i]);
            } else if (files[i].type.startsWith('audio/')) {
                // Processar arquivos de áudio
                const audioUrl = URL.createObjectURL(files[i]);
                const item = document.createElement('div');
                item.className = 'carousel-item' + (selectedFiles.length - 1 === 0 ? ' active' : '');
                item.innerHTML = `
                        <div class="d-flex justify-content-center pt-4" style="height:200px;">
                                                    <audio controls class="maxW mt-5" style="height: 50px; width: 300px ">
                                <source src="${audioUrl}" type="${files[i].type}">
                                Seu navegador não suporta o elemento de áudio.
                            </audio>
                </div>

                        <button type="button" class="remove-btn z-3" onclick="removeFile(${selectedFiles.length - 1})">
                            <span class="material-symbols-outlined no-config">close</span>
                        </button>
                    `;
                const carouselInner = document.getElementById('carouselInner');
                carouselInner.appendChild(item);
                document.getElementById('carouselExampleControls').classList.remove('d-none');
            } else {
                // Processar imagens
                const reader = new FileReader();
                reader.onload = function (e) {
                    const item = document.createElement('div');
                    item.className = 'carousel-item' + (selectedFiles.length - 1 === 0 ? ' active' : '');
                    item.innerHTML = `
                            <img src="${e.target.result}" class="maxW" style="height: 300px" alt="Imagem Selecionada">
                            <button type="button" class="remove-btn z-3" onclick="removeFile(${selectedFiles.length - 1})">
                                <span class="material-symbols-outlined no-config">close</span>
                            </button>
                        `;
                    const carouselInner = document.getElementById('carouselInner');
                    carouselInner.appendChild(item);
                    document.getElementById('carouselExampleControls').classList.remove('d-none');
                };
                reader.readAsDataURL(files[i]);
            }
        }
    }

    function removeFile(index) {
        selectedFiles.splice(index, 1);
        if (selectedFiles.length == 0) {
            document.getElementById('carouselExampleControls').classList.add('d-none');
        }
        displaySelectedFiles();
    }

    function stringSelect() {
        const linkInput = document.getElementById('linkInput').value.trim();
        if (linkInput) {
            selectedFiles.push(linkInput);
            displaySelectedFiles();
        }
    }

    function displaySelectedFiles() {
        const carouselInner = document.getElementById('carouselInner');
        carouselInner.innerHTML = '';

        selectedFiles.forEach((file, index) => {
            const item = document.createElement('div');
            item.className = 'carousel-item' + (index === 0 ? ' active' : '');

            if (typeof file === 'string') {
                item.innerHTML = `
                        <div class="maxW" style="height: 300px; display: flex; align-items: center; justify-content: center;">
                            <a href="${file}" target="_blank">${file}</a>
                            <button type="button" class="remove-btn z-3" onclick="removeFile(${index})">
                                <span class="material-symbols-outlined no-config">close</span>
                            </button>
                        </div>
                    `;
            } else {
                if (file.type.startsWith('video/')) {
                    const videoThumbnailUrl = URL.createObjectURL(file);
                    item.innerHTML = `
                            <img src="${videoThumbnailUrl}" class="maxW" style="height: 300px" alt="Thumbnail do Vídeo">
                            <button type="button" class="remove-btn z-3" onclick="removeFile(${index})">
                                <span class="material-symbols-outlined no-config">close</span>
                            </button>
                        `;
                } else if (file.type.startsWith('audio/')) {
                    const audioUrl = URL.createObjectURL(file);
                    item.innerHTML = `
                            <div class="d-flex justify-content-center pt-4" style="height:200px; background-color: red">

                                <audio controls style="height: 50px; width: 250px;">
                                <source src="${audioUrl}" type="${file.type}">
                                Seu navegador não suporta o elemento de áudio.
                            </audio>
                            </div>
                            <button type="button" class="remove-btn z-3" onclick="removeFile(${index})">
                                <span class="material-symbols-outlined no-config">close</span>
                            </button>
                        `;
                } else {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        item.innerHTML = `
                                <img src="${e.target.result}" class="maxW" style="height: 300px" alt="Imagem Selecionada">
                                <button type="button" class="remove-btn z-3" onclick="removeFile(${index})">
                                    <span class="material-symbols-outlined no-config">close</span>
                                </button>
                            `;
                    };
                    reader.readAsDataURL(file);
                }
            }

            carouselInner.appendChild(item);
        });
    }

    document.getElementById('postForm').addEventListener('submit', function (event) {
        event.preventDefault(); // Evitar o envio automático do formulário

        const description = document.getElementById('floatingTextarea').value.trim();
        const errorMessage = document.getElementById('error-message');

        if (description === "" && selectedFiles.length === 0) {
            errorMessage.style.display = 'block';
            return;
        } else {
            errorMessage.style.display = 'none';
        }

        const formData = new FormData(this);
        selectedFiles.forEach((file, index) => {
            if (typeof file !== 'string') {
                formData.append('Archives', file); // Adicionar cada arquivo ao FormData
            } else {
                formData.append('Links', file); // Adicionar cada link ao FormData
            }
        });

        fetch('@Url.Action("CreatePost", "Posts")', {
            method: 'POST',
            body: formData,
            headers: {
                'X-CSRF-TOKEN': $('input[name="__RequestVerificationToken"]').val() // CSRF token
            }
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    console.log('Post enviado com sucesso:', data);
                    window.location.href = data.redirectUrl; // Redireciona para a URL de sucesso
                } else {
                    console.error('Erro ao enviar o post.');
                    window.location.href = data.redirectUrl; // Redireciona para a URL de falha, se desejado
                }
            })
            .catch(error => {
                console.error('Erro:', error);
                // Tratar o erro conforme necessário
            });
    });
</script>
